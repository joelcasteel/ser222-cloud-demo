{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","values","submitted","splitValues","splitting","merging","onValueChanged","event","entered","target","value","replace","split","filter","val","isNaN","parseInt","setState","onValueSubmit","onNextStep","newSplit","done","forEach","set","half","Math","ceil","length","first","splice","push","second","pairs","reduce","results","index","array","slice","console","log","newMerged","pair","insertLoc","arr","this","findInsertLoc","i","valueField","type","pattern","size","onChange","onClick","controlField","sortTable","tableData","map","idx","splitData","className","j","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c785fab8.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n\n  state = {\n    values: null,\n    submitted: false,\n\n    splitValues: [],\n    splitting: false,\n    merging: false\n  };\n\n  onValueChanged = event => {\n    let entered = event.target.value.replace(' ', '').split(',').filter((val) => {\n      return !isNaN(parseInt(val));\n    });\n\n    this.setState({\n      values: entered\n    });\n  }\n\n  onValueSubmit = event => {\n    this.setState({\n      submitted: true,\n      splitValues: [this.state.values],\n      splitting: true,\n      merging: false\n    });\n  }\n\n  onNextStep = event => {\n    if(this.state.splitting) {\n      let splitValues = this.state.splitValues;\n      let newSplit = [];\n      let done = true;\n      splitValues.forEach((set) => {\n\n\n        //Thanks to: https://bit.ly/3tL8WLT\n        let half = Math.ceil(set.length/2);\n        \n        let first = set.splice(0, half);\n        if(first.length > 0) {\n          done = first.length === 1 && done;\n          newSplit.push(first);\n        }\n\n        let second = set.splice(-half);\n        if(second.length > 0) {\n          done = second.length === 1 && done;\n          newSplit.push(second);\n        }\n\n      });\n\n      this.setState({\n        splitValues: newSplit,\n        splitting: !done,\n        merging: done,\n      });\n    } else {\n\n      //Thanks to Vbyec's answer:\n      //  https://stackoverflow.com/questions/31352141/how-do-you-split-an-array-into-array-pairs-in-javascript\n\n      let pairs = this.state.splitValues.reduce((results, value, index, array) => {\n        if(index % 2 === 0) {\n          results.push(array.slice(index, index + 2));\n        }\n        return results;\n      }, []);\n\n      console.log(pairs);\n      \n      let newMerged = [];\n\n      pairs.forEach((pair) => {\n        if(pair.length > 1) {\n        pair[0].forEach((value) => {\n          this.insertLoc(value, pair[1]);\n        });\n        newMerged.push(pair[1]);\n      } else {\n        newMerged.push(pair[0]);\n      }\n      \n\n      })\n\n      console.log(newMerged);\n\n      this.setState({\n        splitValues: newMerged\n      })\n    }\n  }\n\n  insertLoc = function(val, arr) {\n    arr.splice(this.findInsertLoc(val, arr)+1, 0, val);\n    return arr;\n\n  }\n\n  findInsertLoc = function(val, arr) {\n    for(let i = 0; i < arr.length; i++) {\n      if(parseInt(arr[i]) > parseInt(val)) {\n        return i - 1;\n      }\n    }\n    return arr.length\n    \n  };\n\n  valueField = () => {\n    if(!this.state.submitted) {\n      return (\n        <div>\n          <input type='text' pattern='^(?:\\d+,\\s?)*\\d+$' size='100' onChange={this.onValueChanged}></input>\n          <button onClick={this.onValueSubmit}>Submit</button>\n        </div>\n      );\n    }\n  }\n\n  controlField = () => {\n    if(this.state.submitted) {\n    return (\n      <button onClick={this.onNextStep}>Next Step</button>\n    )} else {\n      return;\n    }\n  }\n\n  sortTable = () => {\n    if(this.state.values !== null) {\n      return (\n        <table>\n          <tbody>\n            {this.tableData()}\n          </tbody>\n        </table>\n      );\n    }\n  };\n\n  tableData = () => {\n    return (\n      <tr>\n        {this.state.values.map((value, idx) => (\n          <td key={idx}>{value}</td>\n        ))}\n      </tr>\n    );\n  }\n\n  splitData = () => {\n    return (\n      <table><tbody><tr>\n    {this.state.splitValues.map((arr, i) => (\n        <td><table className=\"parent\">\n          <tbody>\n            {arr.map((val, j) => (\n              <td>{val}</td>\n            ))}\n          </tbody>\n        </table>\n        </td>\n    ))}\n    </tr></tbody></table>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Merge Sort Demo</h1>\n        {this.valueField()}\n        <br/><br/>\n        <div>\n          {this.sortTable()}\n        </div>\n        <br/><br/>\n        <div>\n          {this.controlField()}\n        </div>\n        <br/>\n        <div>\n          {this.splitData()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}